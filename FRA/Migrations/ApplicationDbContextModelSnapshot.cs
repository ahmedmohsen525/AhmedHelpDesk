// <auto-generated />
using System;
using FRA.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FRA.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FRA.Models.Category", b =>
                {
                    b.Property<int>("Cat_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Cat_ID"));

                    b.Property<string>("Cat_name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Cat_ID");

                    b.ToTable("Categoties");
                });

            modelBuilder.Entity("FRA.Models.Employee", b =>
                {
                    b.Property<int>("Emp_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Emp_ID"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone_Num")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Emp_ID");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("FRA.Models.Evaluation", b =>
                {
                    b.Property<int>("Service_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Service_ID"));

                    b.Property<int>("Agent_ID")
                        .HasColumnType("int");

                    b.Property<DateTime>("End_time")
                        .HasColumnType("datetime2");

                    b.Property<string>("Service_levels")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Start_time")
                        .HasColumnType("datetime2");

                    b.HasKey("Service_ID");

                    b.ToTable("Evaluations");
                });

            modelBuilder.Entity("FRA.Models.ServiceProvider", b =>
                {
                    b.Property<int>("Agent_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Agent_ID"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("End_Time")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Agent_ID");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("FRA.Models.ServiceType", b =>
                {
                    b.Property<int>("Service_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Service_ID"));

                    b.Property<int>("Agent_ID")
                        .HasColumnType("int");

                    b.Property<int>("Cat_ID")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryCat_ID")
                        .HasColumnType("int");

                    b.Property<string>("Descr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Request_time")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ServiceProviderAgent_ID")
                        .HasColumnType("int");

                    b.Property<string>("Service_levels")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Service_nam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Start_time")
                        .HasColumnType("datetime2");

                    b.Property<int>("prioity")
                        .HasColumnType("int");

                    b.HasKey("Service_ID");

                    b.HasIndex("CategoryCat_ID");

                    b.HasIndex("ServiceProviderAgent_ID");

                    b.ToTable("Types");
                });

            modelBuilder.Entity("FRA.Models.Status", b =>
                {
                    b.Property<int>("Status_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Status_ID"));

                    b.Property<DateTime>("End_time")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Str_time")
                        .HasColumnType("datetime2");

                    b.HasKey("Status_ID");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("FRA.Models.TecnicalGrop", b =>
                {
                    b.Property<int>("Group_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Group_ID"));

                    b.Property<string>("Group_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ServiceProviderAgent_ID")
                        .HasColumnType("int");

                    b.HasKey("Group_ID");

                    b.HasIndex("ServiceProviderAgent_ID");

                    b.ToTable("Technicals");
                });

            modelBuilder.Entity("FRA.Models.Ticket", b =>
                {
                    b.Property<int>("Ticket_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Ticket_ID"));

                    b.Property<DateTime>("Created_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmployeeEmp_ID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Resolved_Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ServiceProviderAgent_ID")
                        .HasColumnType("int");

                    b.Property<int>("Service_ID")
                        .HasColumnType("int");

                    b.Property<string>("TicketType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Ticket_ID");

                    b.HasIndex("EmployeeEmp_ID");

                    b.HasIndex("ServiceProviderAgent_ID");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("FRA.Models.Ticket_case", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("AddProblemNew")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddProblemResnt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Cat_ID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hardwere_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hardwere_Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hosting_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Inside")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Insidecon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Knoledg_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Outsidecon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ResolvedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status_ID")
                        .HasColumnType("int");

                    b.Property<string>("outside")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("select")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("Cat_ID");

                    b.HasIndex("Status_ID");

                    b.ToTable("Ticket_cases");
                });

            modelBuilder.Entity("FRA.Models.ServiceType", b =>
                {
                    b.HasOne("FRA.Models.Category", null)
                        .WithMany("ServiceType")
                        .HasForeignKey("CategoryCat_ID");

                    b.HasOne("FRA.Models.ServiceProvider", null)
                        .WithMany("ServiceType")
                        .HasForeignKey("ServiceProviderAgent_ID");
                });

            modelBuilder.Entity("FRA.Models.TecnicalGrop", b =>
                {
                    b.HasOne("FRA.Models.ServiceProvider", null)
                        .WithMany("TecnicalGrop")
                        .HasForeignKey("ServiceProviderAgent_ID");
                });

            modelBuilder.Entity("FRA.Models.Ticket", b =>
                {
                    b.HasOne("FRA.Models.Employee", null)
                        .WithMany("Tickets")
                        .HasForeignKey("EmployeeEmp_ID");

                    b.HasOne("FRA.Models.ServiceProvider", null)
                        .WithMany("Ticket")
                        .HasForeignKey("ServiceProviderAgent_ID");
                });

            modelBuilder.Entity("FRA.Models.Ticket_case", b =>
                {
                    b.HasOne("FRA.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("Cat_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FRA.Models.Status", "Status")
                        .WithMany()
                        .HasForeignKey("Status_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("FRA.Models.Category", b =>
                {
                    b.Navigation("ServiceType");
                });

            modelBuilder.Entity("FRA.Models.Employee", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("FRA.Models.ServiceProvider", b =>
                {
                    b.Navigation("ServiceType");

                    b.Navigation("TecnicalGrop");

                    b.Navigation("Ticket");
                });
#pragma warning restore 612, 618
        }
    }
}
